var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.091,1,1.871]],["body/modules/AppModule.html",[0,1.714,1,3.576,2,1.394,3,1.394,4,1.731,5,1.731,6,1.394,7,1.731,8,1.731,9,2.589,10,2.589,11,2.408,12,0.039,13,2.991,14,2.677,15,2.317,16,1.731,17,1.731,18,0.354,19,0.3,20,0.3,21,3.145,22,1.683,23,2.611,24,2.609,25,0.612,26,0.677,27,2.223,28,1.55,29,3.145,30,3.145,31,3.145,32,3.145,33,3.145,34,3.145,35,2.102,36,3.145,37,3.145,38,0.354,39,0.062,40,0.02,41,0.027,42,0.02]],["title/controllers/AuthController.html",[23,1.661,43,1.338]],["body/controllers/AuthController.html",[12,0.039,18,0.302,19,0.256,20,0.256,22,1.073,23,2.078,25,0.583,26,0.577,38,0.302,39,0.053,40,0.017,41,0.024,42,0.017,43,1.19,44,2.21,45,1.898,46,2.685,47,0.457,48,1.673,49,3.108,50,2.151,51,3.775,52,3.775,53,2.685,54,2.151,55,2.685,56,1.163,57,2.685,58,1.746,59,0.744,60,1.746,61,3.595,62,1.935,63,2.685,64,1.712,65,3.775,66,2.685,67,0.643,68,3.595,69,2.34,70,2.685,71,1.548,72,2.685,73,4.367,74,2.685,75,2.669,76,2.21,77,1.898,78,2.21,79,2.685,80,2.21,81,1.478,82,2.21,83,1.19,84,1.19,85,1.935,86,1.898,87,2.21,88,2.685,89,1.898,90,1.898,91,1.478,92,2.685,93,2.685,94,2.685,95,2.151,96,2.685,97,2.685,98,2.21,99,2.685,100,2.685,101,2.685,102,0.97,103,0.97,104,1.323,105,2.685,106,2.685]],["title/modules/AuthModule.html",[0,1.091,11,1.338]],["body/modules/AuthModule.html",[0,1.614,2,1.241,3,1.241,4,1.541,5,1.541,6,1.241,7,2.458,8,2.458,11,2.5,12,0.04,14,1.915,15,2.14,16,1.541,17,1.541,18,0.315,19,0.267,20,0.267,22,1.554,23,2.458,24,1.735,25,0.627,26,0.602,38,0.315,39,0.055,40,0.018,41,0.025,42,0.018,81,1.541,85,2.548,86,1.979,107,2.305,108,2.305,109,2.305,110,3.165,111,2.799,112,3.2,113,2.799,114,1.979,115,3.887,116,2.799,117,1.241,118,2.305,119,2.799,120,2.799,121,2.768,122,2.305,123,2.799,124,2.799,125,2.799,126,2.799,127,2.799,128,2.799,129,1.979]],["title/injectables/AuthService.html",[85,1.338,130,1.091]],["body/injectables/AuthService.html",[12,0.04,18,0.203,19,0.172,20,0.172,25,0.504,26,0.388,35,1.245,38,0.203,39,0.036,40,0.012,41,0.018,42,0.012,47,0.307,48,1.245,49,2.312,50,2.588,56,1.192,58,1.789,59,0.823,60,1.789,62,1.872,67,0.823,69,1.741,71,1.273,75,1.274,82,1.484,84,0.799,85,1.245,91,1.546,95,2.081,102,1.408,103,1.794,104,1.92,114,1.274,117,1.727,118,1.484,130,1.015,131,0.992,132,1.484,133,2.809,134,2.809,135,2.312,136,2.809,137,1.546,138,1.803,139,4.672,140,1.803,141,2.809,142,2.809,143,1.112,144,1.803,145,1.727,146,2.809,147,1.803,148,2.809,149,1.803,150,3.897,151,2.312,152,1.803,153,2.809,154,2.312,155,1.803,156,1.484,157,0.888,158,0.721,159,1.484,160,1.274,161,1.986,162,2.312,163,2.809,164,1.789,165,1.484,166,2.139,167,1.128,168,2.139,169,1.484,170,1.484,171,1.484,172,1.803,173,1.546,174,2.312,175,1.484,176,1.117,177,1.484,178,1.484,179,2.312,180,2.312,181,2.312,182,1.741,183,1.741,184,2.312,185,1.803,186,0.799,187,1.803,188,1.803,189,1.803,190,2.312,191,2.312,192,2.312,193,1.803,194,1.803,195,1.484,196,1.803,197,1.803]],["title/injectables/AuthStrategy.html",[110,1.661,130,1.091]],["body/injectables/AuthStrategy.html",[12,0.04,18,0.326,19,0.276,20,0.276,25,0.597,26,0.623,38,0.326,39,0.057,40,0.019,41,0.026,42,0.019,47,0.494,48,1.764,50,2.24,56,1.06,58,1.592,59,0.678,60,1.592,62,1.284,67,0.834,69,2.467,81,1.595,84,1.284,85,2.35,86,2.048,90,2.048,95,1.427,102,1.438,103,1.643,104,1.427,110,2.191,121,2.467,122,2.385,129,2.048,130,1.438,131,1.595,137,1.595,143,0.623,145,1.764,154,3.277,157,1.427,158,1.158,166,1.796,167,0.947,168,1.796,198,2.385,199,3.98,200,2.897,201,2.897,202,3.98,203,2.897,204,3.98,205,2.897,206,2.897,207,2.897,208,2.385,209,1.595,210,2.897,211,2.048,212,2.897,213,2.897,214,2.897,215,2.897,216,2.897,217,2.897]],["title/classes/CreateUserDto.html",[39,0.06,71,0.986]],["body/classes/CreateUserDto.html",[12,0.039,18,0.368,19,0.311,20,0.311,25,0.368,38,0.486,39,0.096,40,0.021,41,0.028,42,0.021,47,0.557,54,2.382,56,1.288,59,0.824,64,1.181,67,0.824,71,1.411,143,1.223,164,2.057,186,2.279,218,1.449,219,2.31,220,2.127,221,2.026,222,3.269,223,2.691,224,3.269,225,2.026,226,3.269,227,3.405,228,2.997,229,3.405,230,1.61,231,1.61,232,1.799,233,2.026,234,2.997,235,2.677]],["title/classes/CreateUserDto-1.html",[39,0.05,71,0.828,236,2.085]],["body/classes/CreateUserDto-1.html",[12,0.039,18,0.368,19,0.311,20,0.311,25,0.368,38,0.486,39,0.096,40,0.021,41,0.028,42,0.021,47,0.557,54,2.382,56,1.288,59,0.824,64,1.181,67,0.824,71,1.411,143,1.223,164,2.057,186,2.279,218,1.449,220,2.127,221,2.026,223,2.691,225,2.026,227,3.405,228,2.997,229,3.405,230,1.61,231,1.61,232,1.799,233,2.026,234,2.997,235,2.677,237,2.31,238,3.269,239,3.269,240,3.269]],["title/classes/Error.html",[39,0.06,158,1.207]],["body/classes/Error.html",[12,0.039,18,0.33,19,0.28,20,0.28,25,0.452,26,0.631,38,0.452,39,0.079,40,0.019,41,0.026,42,0.019,56,0.782,58,1.173,59,0.5,60,1.173,67,0.5,83,1.3,102,1.863,137,1.615,143,1.059,157,2.425,158,1.606,167,0.959,173,2.71,176,3.3,209,2.21,211,2.074,218,1.3,241,2.074,242,4.052,243,3.306,244,3.051,245,4.568,246,2.934,247,3.306,248,2.074,249,3.306,250,3.306,251,3.306,252,2.074,253,2.415,254,2.415,255,2.415,256,2.415,257,2.415,258,2.415,259,2.415,260,2.415,261,2.415,262,2.415,263,2.415,264,2.415,265,2.415,266,2.415,267,2.415,268,2.415,269,2.415,270,2.415,271,2.415,272,2.415]],["title/classes/HttpExceptionFilter.html",[39,0.06,83,1.338]],["body/classes/HttpExceptionFilter.html",[12,0.039,18,0.327,19,0.277,20,0.277,25,0.449,26,0.625,38,0.449,39,0.079,40,0.019,41,0.026,42,0.019,47,0.495,48,1.768,56,0.774,58,1.162,59,0.495,60,1.162,62,1.288,67,0.495,83,1.768,102,1.857,143,0.858,157,1.965,158,1.162,167,0.95,173,2.507,176,3.039,209,1.6,211,2.054,218,1.288,241,2.054,242,4.23,243,2.392,244,2.473,245,4.37,247,4.036,248,3.22,249,3.75,250,3.284,251,3.284,252,2.054,253,2.392,254,3.284,255,3.284,256,3.75,257,2.392,258,2.392,259,2.392,260,2.392,261,2.392,262,2.392,263,2.392,264,2.392,265,2.392,266,2.392,267,2.392,268,2.392,269,2.392,270,2.392,271,2.392,272,2.392,273,2.906,274,2.906,275,2.906]],["title/classes/LoginDto.html",[39,0.06,64,1.091]],["body/classes/LoginDto.html",[12,0.038,18,0.382,19,0.323,20,0.323,25,0.382,38,0.498,39,0.097,40,0.022,41,0.029,42,0.022,47,0.578,54,2.179,56,1.178,59,0.578,64,1.598,67,0.753,71,1.108,143,1.216,164,2.086,186,2.312,218,1.502,219,2.396,220,2.179,221,2.101,225,2.101,227,3.44,228,3.051,229,3.44,230,1.67,231,1.67,232,1.866,233,2.101,234,3.051,235,2.741,276,3.39,277,3.39]],["title/classes/LoginDto-1.html",[39,0.05,64,0.915,236,2.085]],["body/classes/LoginDto-1.html",[12,0.038,18,0.382,19,0.323,20,0.323,25,0.382,38,0.498,39,0.097,40,0.022,41,0.029,42,0.022,47,0.578,54,2.179,56,1.178,59,0.578,64,1.598,67,0.753,71,1.108,143,1.216,164,2.086,186,2.312,218,1.502,220,2.179,221,2.101,225,2.101,227,3.44,228,3.051,229,3.44,230,1.67,231,1.67,232,1.866,233,2.101,234,3.051,235,2.741,237,2.396,278,3.39,279,3.39]],["title/interfaces/Task.html",[280,1.661,281,1.487]],["body/interfaces/Task.html",[12,0.039,18,0.389,19,0.329,20,0.329,25,0.389,35,1.984,38,0.504,40,0.022,41,0.029,42,0.022,47,0.588,67,0.927,102,1.248,143,1.271,145,2.328,167,1.128,209,2.464,220,2.205,280,1.901,281,2.205,282,2.441,283,2.441,284,4.088,285,2.996,286,3.374,287,2.464,288,1.901,289,2.141,290,3.164]],["title/controllers/TasksController.html",[43,1.338,291,1.871]],["body/controllers/TasksController.html",[12,0.04,18,0.251,19,0.212,20,0.212,22,0.891,25,0.522,26,0.479,38,0.251,39,0.044,40,0.014,41,0.021,42,0.014,43,0.987,45,1.575,47,0.38,48,1.462,50,2.714,54,2.285,56,1.236,58,1.737,59,0.74,60,1.737,61,1.834,62,2.056,67,0.74,68,3.999,76,3.235,77,1.575,78,1.834,80,1.834,81,1.226,83,0.987,84,0.987,89,1.575,90,1.575,91,1.226,95,2.285,98,1.834,104,1.098,143,1.217,145,2.153,281,2.141,285,2.392,286,2.045,291,2.045,292,1.834,293,1.834,294,3.93,295,2.716,296,3.577,297,2.716,298,2.716,299,2.228,300,2.228,301,1.834,302,3.299,303,2.228,304,2.228,305,1.834,306,3.299,307,2.228,308,1.834,309,3.299,310,2.228,311,2.228,312,2.228,313,1.834,314,2.228,315,2.228,316,2.228,317,2.228,318,2.228,319,2.228,320,1.575,321,1.626,322,1.834,323,2.228,324,2.228,325,2.228,326,2.228,327,2.228,328,2.228,329,2.228,330,2.228,331,2.228,332,2.228,333,2.228,334,2.228]],["title/modules/TasksModule.html",[0,1.091,13,1.661]],["body/modules/TasksModule.html",[0,1.738,2,1.433,3,1.433,4,1.78,5,1.78,6,1.433,7,2.648,8,1.78,11,2.427,12,0.039,13,3.123,15,2.36,16,1.78,17,1.78,18,0.364,19,0.308,20,0.308,22,1.714,24,2.658,25,0.617,26,0.696,27,2.286,28,1.593,38,0.364,39,0.064,40,0.021,41,0.028,42,0.021,59,0.551,281,1.593,287,1.78,289,2.658,291,2.982,320,2.286,321,2.698,322,2.663,335,2.663,336,3.234,337,2.663,338,3.234,339,2.663,340,3.234,341,2.663]],["title/injectables/TasksService.html",[130,1.091,321,1.487]],["body/injectables/TasksService.html",[12,0.04,18,0.23,19,0.194,20,0.194,25,0.503,26,0.439,28,1.005,35,1.652,38,0.23,39,0.04,40,0.013,41,0.02,42,0.013,47,0.347,48,1.369,50,2.745,56,1.252,58,1.786,59,0.761,60,1.786,62,1.979,67,0.761,69,1.914,84,0.904,91,1.123,95,2.201,102,1.614,104,2.201,130,1.116,131,1.123,137,1.123,143,1.198,145,1.652,157,1.005,158,0.815,161,1.441,166,2.311,167,1.46,168,2.311,173,1.123,281,2.803,285,2.289,286,1.914,288,1.123,293,2.542,295,2.542,296,3.423,297,2.542,298,2.542,301,2.542,305,2.542,308,2.542,320,1.441,321,1.521,342,1.679,343,3.088,344,2.039,345,3.423,346,2.039,347,3.088,348,3.088,349,2.039,350,2.039,351,2.039,352,2.039,353,4.157,354,2.039,355,1.679,356,2.039,357,2.039,358,2.039,359,2.039,360,2.039,361,3.727,362,3.727,363,2.039,364,2.039,365,2.039]],["title/interfaces/User.html",[103,1.091,280,1.661]],["body/interfaces/User.html",[12,0.039,18,0.252,19,0.213,20,0.213,25,0.252,35,2.231,38,0.373,40,0.014,41,0.021,42,0.014,47,0.381,59,0.829,67,0.972,102,0.809,103,1.574,143,1.291,145,1.93,164,1.946,167,0.731,182,2.881,183,2.881,186,2.291,209,1.823,220,1.631,230,1.631,231,1.103,244,1.388,280,1.232,282,1.582,284,3.244,287,1.823,288,1.232,290,2.786,366,1.582,367,3.826,368,3.826,369,3.826,370,1.388,371,2.786,372,3.244,373,1.843,374,2.726,375,1.843,376,1.843,377,1.843,378,1.843,379,1.843,380,1.843,381,3.244,382,1.843,383,2.726,384,1.843,385,1.582,386,1.843,387,1.843,388,3.585,389,1.843,390,2.726,391,1.843,392,2.726,393,2.726,394,1.843,395,1.843,396,1.843,397,2.726,398,1.843]],["title/controllers/UsersController.html",[43,1.338,399,1.871]],["body/controllers/UsersController.html",[12,0.038,18,0.473,19,0.4,20,0.4,22,1.678,25,0.569,26,0.903,38,0.473,39,0.083,40,0.027,41,0.033,42,0.027,43,1.86,45,2.967,77,2.967,83,1.86,84,1.86,89,2.967,399,3.135,400,3.455,401,4.197,402,4.197]],["title/modules/UsersModule.html",[0,1.091,14,1.487]],["body/modules/UsersModule.html",[0,1.723,2,1.408,3,1.408,4,1.749,5,1.749,6,1.408,7,2.625,8,2.625,11,1.878,12,0.039,14,2.741,15,2.333,16,1.749,17,1.749,18,0.358,19,0.303,20,0.303,22,1.695,24,1.97,25,0.614,26,0.684,27,2.246,28,1.566,38,0.358,39,0.063,40,0.021,41,0.027,42,0.021,59,0.541,103,1.148,112,3.489,117,2.601,287,1.749,339,2.616,341,2.616,370,2.627,399,2.956,403,2.616,404,2.616,405,2.616,406,3.178,407,3.178,408,3.178,409,2.616]],["title/injectables/UsersService.html",[117,1.338,130,1.091]],["body/injectables/UsersService.html",[12,0.04,18,0.212,19,0.18,20,0.18,25,0.535,26,0.405,28,0.928,35,1.288,38,0.212,39,0.037,40,0.012,41,0.019,42,0.012,47,0.321,48,1.288,50,2.705,56,1.214,58,1.822,59,0.835,60,1.822,62,1.911,64,1.442,67,0.776,71,1.551,75,2.82,84,0.835,87,1.551,91,1.037,95,2.124,102,1.442,103,1.772,104,2.244,117,1.288,130,1.051,131,1.037,135,2.393,137,1.037,143,0.763,145,0.835,151,2.393,156,1.551,157,0.928,158,1.419,159,1.551,160,1.332,161,1.332,162,2.393,164,1.595,165,1.551,166,1.802,167,1.304,168,1.802,169,1.551,170,1.551,171,1.551,173,1.6,174,2.393,175,1.551,176,1.168,177,1.551,178,1.551,179,2.393,180,2.393,181,2.393,182,1.802,183,1.802,184,2.393,190,1.551,191,1.551,192,1.551,195,1.551,248,2.055,288,1.037,345,3.285,355,1.551,409,1.551,410,1.551,411,2.907,412,2.907,413,2.907,414,2.907,415,1.884,416,1.884,417,2.907,418,2.907,419,1.884,420,2.907,421,1.884,422,2.907,423,1.884,424,2.907,425,1.884,426,2.907,427,1.884,428,1.884,429,2.907,430,2.907,431,2.907,432,2.907,433,1.884,434,1.884,435,1.884]],["title/coverage.html",[436,2.893]],["body/coverage.html",[6,1.284,12,0.039,20,0.276,23,1.595,39,0.105,40,0.019,41,0.026,42,0.019,43,2.015,44,2.385,64,1.438,67,0.494,71,1.301,83,1.284,85,1.284,103,1.047,110,1.595,117,1.284,121,1.796,130,1.769,132,2.385,158,1.158,167,0.947,198,2.385,219,2.813,237,2.813,241,2.813,280,2.191,281,1.427,283,2.813,289,1.796,291,1.796,292,2.385,321,1.427,342,2.385,366,2.813,370,1.796,385,4.229,399,1.796,400,2.385,410,2.385,436,2.048,437,2.897,438,2.897,439,2.897,440,4.896,441,4.547,442,4.547,443,2.385,444,4.547,445,5.132,446,2.385,447,2.897,448,2.897,449,2.897,450,3.98,451,2.897,452,2.897]],["title/dependencies.html",[3,1.606,453,2.533]],["body/dependencies.html",[3,1.566,12,0.04,26,0.76,28,1.741,39,0.09,40,0.023,41,0.029,42,0.023,81,1.945,114,2.498,129,2.498,160,2.498,208,3.74,232,1.945,252,2.498,288,1.945,454,5.021,455,3.533,456,3.533,457,3.533,458,4.543,459,3.533,460,3.533,461,3.533,462,3.533,463,3.533,464,3.533,465,3.533,466,3.533,467,3.533,468,3.533,469,3.533,470,3.533,471,3.533,472,3.533,473,3.533,474,3.533,475,3.533,476,3.533,477,3.533,478,3.533,479,3.533,480,3.533,481,3.533,482,3.533]],["title/miscellaneous/functions.html",[483,1.57,484,2.983]],["body/miscellaneous/functions.html",[6,2.489,12,0.034,40,0.029,41,0.034,42,0.029,47,0.775,446,3.747,483,2.821,484,3.747,485,4.551]],["title/index.html",[47,0.432,486,2.533,487,2.533]],["body/index.html",[12,0.039,19,0.306,40,0.021,41,0.028,42,0.021,285,1.768,313,2.644,371,2.27,436,2.27,488,3.211,489,3.211,490,4.268,491,3.211,492,3.211,493,3.211,494,3.211,495,3.211,496,3.211,497,4.793,498,3.211,499,3.211,500,3.211,501,5.578,502,3.211,503,3.211,504,3.211,505,5.466,506,3.211,507,3.211,508,4.268,509,3.211,510,3.211,511,3.211,512,3.211,513,4.268,514,4.268,515,3.211,516,3.211,517,3.211,518,4.268,519,4.268,520,3.211,521,3.211,522,3.211,523,3.211,524,3.211,525,2.644,526,3.211,527,3.211,528,3.211,529,3.211,530,3.211,531,3.211,532,3.211,533,3.211,534,3.211,535,3.211,536,3.211,537,3.211,538,3.211,539,3.211,540,3.211,541,3.211,542,3.211]],["title/modules.html",[2,1.814]],["body/modules.html",[1,2.65,2,1.895,11,1.895,12,0.033,13,2.353,14,2.106,40,0.028,41,0.033,42,0.028,525,4.666,543,5.668,544,5.668,545,5.668]],["title/overview.html",[546,3.37]],["body/overview.html",[0,1.137,1,3.495,2,1.394,3,1.394,4,1.731,5,1.731,6,1.394,7,1.731,8,1.731,9,2.589,10,2.589,11,2.557,12,0.038,13,3.055,14,2.677,15,2.317,16,1.731,17,1.731,22,1.258,40,0.02,41,0.027,42,0.02,85,2.459,107,2.589,108,2.589,109,2.589,110,3.055,117,2.459,131,1.731,218,1.394,282,2.223,321,2.337,335,2.589,337,2.589,403,2.589,404,2.589,405,2.589,546,2.589,547,4.209,548,3.145,549,3.145,550,3.145]],["title/miscellaneous/variables.html",[483,1.57,551,2.983]],["body/miscellaneous/variables.html",[12,0.039,35,2.392,40,0.017,41,0.024,42,0.017,47,0.447,59,0.633,67,0.959,103,1.342,121,2.302,143,1.197,164,1.485,167,1.214,182,1.626,183,1.626,186,2.078,230,1.83,231,1.292,244,1.626,283,1.854,285,1.444,286,1.626,287,2.045,289,2.302,290,3.498,366,1.854,367,2.159,368,2.159,369,2.159,370,2.302,371,3.048,372,3.55,373,2.159,374,3.058,375,2.159,376,2.159,377,2.159,378,2.159,379,2.159,380,2.159,381,3.55,382,2.159,383,3.058,384,2.159,385,1.854,386,2.159,387,2.159,388,4.35,389,2.159,390,3.058,391,2.159,392,3.058,393,3.058,394,2.159,395,2.159,396,2.159,397,3.058,398,2.159,443,2.159,483,1.626,551,2.159,552,2.623,553,2.623,554,2.623,555,4.312,556,2.623]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":385,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":236,"title":{"classes/CreateUserDto-1.html":{},"classes/LoginDto-1.html":{}},"body":{}}],["10",{"_index":393,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":550,"title":{},"body":{"overview.html":{}}}],["200",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["3",{"_index":548,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":374,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["3600",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":547,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["4.17.20",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":390,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["5.11.14",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":549,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["9]+\\.)+[a",{"_index":386,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["9]{1,3}\\.[0",{"_index":381,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["9]{1,3}\\])|(([a",{"_index":382,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["_.pick(user",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["_id",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["access_token",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":372,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["addtask",{"_index":343,"title":{},"body":{"injectables/TasksService.html":{}}}],["addtask(title",{"_index":348,"title":{},"body":{"injectables/TasksService.html":{}}}],["adduser",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduser(newuser",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["admin",{"_index":396,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":526,"title":{},"body":{"index.html":{}}}],["app",{"_index":503,"title":{},"body":{"index.html":{}}}],["applications",{"_index":496,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":247,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{}}}],["auth.strategy",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.controller",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":23,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":535,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":85,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authstrategy",{"_index":110,"title":{"injectables/AuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":527,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('description",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{}}}],["body('title",{"_index":325,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":244,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":545,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":543,"title":{},"body":{"modules.html":{}}}],["building",{"_index":491,"title":{},"body":{"index.html":{}}}],["catch",{"_index":248,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":255,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":253,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["character",{"_index":376,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":39,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":335,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":336,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":337,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":403,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":404,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":405,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["console.log(user",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Task.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{}}}],["constant",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel('task",{"_index":356,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(@injectmodel('user",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":200,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["constructor(private",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{}}}],["constructor(success",{"_index":243,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["constructor(taskmodel",{"_index":344,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(usermodel",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":43,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":323,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('users",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":436,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":294,"title":{},"body":{"controllers/TasksController.html":{}}}],["create(title",{"_index":299,"title":{},"body":{"controllers/TasksController.html":{}}}],["createdat",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":71,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":257,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":260,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":259,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["data.email",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.password",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["date().toisostring",{"_index":270,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"controllers/TasksController.html":{}}}],["default",{"_index":388,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":317,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":302,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask",{"_index":295,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(@param('id",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask(id",{"_index":301,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":285,"title":{},"body":{"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":504,"title":{},"body":{"index.html":{}}}],["disable",{"_index":312,"title":{},"body":{"controllers/TasksController.html":{}}}],["document",{"_index":284,"title":{},"body":{"interfaces/Task.html":{},"interfaces/User.html":{}}}],["documentation",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["dto/user.dto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":515,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":492,"title":{},"body":{"index.html":{}}}],["email",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["emailverified",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["emailverifytoken",{"_index":367,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":395,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":158,"title":{"classes/Error.html":{}},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["error(false",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["eslint",{"_index":311,"title":{},"body":{"controllers/TasksController.html":{}}}],["eslint/no",{"_index":314,"title":{},"body":{"controllers/TasksController.html":{}}}],["exception",{"_index":274,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":263,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":261,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":249,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":252,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":209,"title":{},"body":{"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Task.html":{},"interfaces/User.html":{}}}],["extractjwt",{"_index":207,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":213,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["false",{"_index":389,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyid",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(data",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["forwardref",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":361,"title":{},"body":{"injectables/TasksService.html":{}}}],["framework",{"_index":490,"title":{},"body":{"index.html":{}}}],["full",{"_index":373,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":484,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":306,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('me",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me')@useguards(undefined",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["getall",{"_index":296,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getme",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getme(@req",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(id",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["getme(req",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{}}}],["getone",{"_index":297,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getone(@param('id",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{}}}],["getone(id",{"_index":305,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getting",{"_index":486,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyid(id",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["grow",{"_index":522,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":532,"title":{},"body":{"index.html":{}}}],["host",{"_index":256,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":258,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":242,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":83,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"controllers/AuthController.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":539,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.conflict",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.not_found",{"_index":362,"title":{},"body":{"injectables/TasksService.html":{}}}],["httpstatus.unauthorized",{"_index":217,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["id",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":254,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":130,"title":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":355,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":500,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":502,"title":{},"body":{"index.html":{}}}],["interface",{"_index":280,"title":{"interfaces/Task.html":{},"interfaces/User.html":{}},"body":{"interfaces/Task.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":282,"title":{},"body":{"interfaces/Task.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invalid",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdefined",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["isdefined()@isstring()@isemail",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["isdefined()@isstring()@maxlength(10)@minlength(5",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["isdefined()@isstring()@maxlength(32)@minlength(5",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["isemail",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["isstring",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["join",{"_index":529,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":212,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["jwtmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":204,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["jwtservice",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":536,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["lenth",{"_index":392,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":542,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":519,"title":{},"body":{"index.html":{}}}],["literal",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{}}}],["lodash",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["login",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(id",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindata",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["logindto",{"_index":64,"title":{"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["matcher",{"_index":379,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":375,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":394,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["maxlength(10",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["maxlength(32",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["message",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":391,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["minlength",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["minlength(5",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{}}}],["miscellaneous",{"_index":483,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":518,"title":{},"body":{"index.html":{}}}],["mode",{"_index":508,"title":{},"body":{"index.html":{}}}],["model",{"_index":345,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":288,"title":{},"body":{"interfaces/Task.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":341,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/test",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":531,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":537,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":497,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":541,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Task.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.email",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["node.js",{"_index":489,"title":{},"body":{"index.html":{}}}],["npm",{"_index":501,"title":{},"body":{"index.html":{}}}],["null",{"_index":397,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":264,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["open",{"_index":520,"title":{},"body":{"index.html":{}}}],["optional",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":546,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":453,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":318,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["passport",{"_index":208,"title":{},"body":{"injectables/AuthStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":205,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":210,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["password",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":319,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id",{"_index":309,"title":{},"body":{"controllers/TasksController.html":{}}}],["path",{"_index":271,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["pg",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":371,"title":{},"body":{"interfaces/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('signin",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@usepipes(new",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":510,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":488,"title":{},"body":{"index.html":{}}}],["project",{"_index":521,"title":{},"body":{"index.html":{}}}],["promise",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{}}}],["properties",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"interfaces/User.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["read",{"_index":530,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":499,"title":{},"body":{"index.html":{}}}],["req",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["request",{"_index":250,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":272,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":290,"title":{},"body":{"interfaces/Task.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetpasswordtoken",{"_index":368,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":251,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json",{"_index":265,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":505,"title":{},"body":{"index.html":{}}}],["runvalidators",{"_index":364,"title":{},"body":{"injectables/TasksService.html":{}}}],["rxjs",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0",{"_index":380,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["salt",{"_index":369,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":493,"title":{},"body":{"index.html":{}}}],["schema",{"_index":287,"title":{},"body":{"interfaces/Task.html":{},"modules/TasksModule.html":{},"interfaces/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":214,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["server",{"_index":494,"title":{},"body":{"index.html":{}}}],["side",{"_index":495,"title":{},"body":{"index.html":{}}}],["signin",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(@body",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(body",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinuser",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["signinuser(logindata",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["signoptions",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(newuser",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["signupuser(newuser",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":524,"title":{},"body":{"index.html":{}}}],["src/.../constant.ts",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task.model.ts",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":339,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:42",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.strategy.ts",{"_index":198,"title":{},"body":{"injectables/AuthStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.strategy.ts:16",{"_index":203,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["src/auth/auth.strategy.ts:8",{"_index":201,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["src/auth/constant.ts",{"_index":443,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/user.dto.ts",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/user.dto.ts:14",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/auth/dto/user.dto.ts:20",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/auth/dto/user.dto.ts:25",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/auth/dto/user.dto.ts:32",{"_index":277,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/user.dto.ts:37",{"_index":276,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/main.ts",{"_index":446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/task.model.ts",{"_index":283,"title":{},"body":{"interfaces/Task.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":292,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:26",{"_index":300,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:34",{"_index":307,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:39",{"_index":304,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:43",{"_index":303,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:48",{"_index":310,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":338,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":342,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:11",{"_index":349,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:20",{"_index":351,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:25",{"_index":352,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:34",{"_index":354,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:45",{"_index":350,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:8",{"_index":346,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/dto/user.dto",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/users/dto/user.dto.ts",{"_index":237,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/LoginDto-1.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:14",{"_index":239,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/users/dto/user.dto.ts:20",{"_index":240,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/users/dto/user.dto.ts:25",{"_index":238,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/users/dto/user.dto.ts:32",{"_index":279,"title":{},"body":{"classes/LoginDto-1.html":{}}}],["src/users/dto/user.dto.ts:37",{"_index":278,"title":{},"body":{"classes/LoginDto-1.html":{}}}],["src/users/user.model.ts",{"_index":366,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.module",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":406,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:74",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/error",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/utils/error.ts",{"_index":241,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/utils/error.ts:17",{"_index":273,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/utils/error.ts:9",{"_index":246,"title":{},"body":{"classes/Error.html":{}}}],["start",{"_index":506,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":509,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":511,"title":{},"body":{"index.html":{}}}],["started",{"_index":487,"title":{"index.html":{}},"body":{}}],["starter",{"_index":498,"title":{},"body":{"index.html":{}}}],["statements",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":245,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":266,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":533,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":206,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["string",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":211,"title":{},"body":{"injectables/AuthStrategy.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["support",{"_index":525,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":544,"title":{},"body":{"modules.html":{}}}],["table",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":281,"title":{"interfaces/Task.html":{}},"body":{"interfaces/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["task.model",{"_index":320,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":358,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskmodel",{"_index":347,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks",{"_index":293,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":340,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":322,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["taskschema",{"_index":289,"title":{},"body":{"interfaces/Task.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskscontroller",{"_index":291,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskservice",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":321,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":514,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":517,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":516,"title":{},"body":{"index.html":{}}}],["tests",{"_index":513,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":523,"title":{},"body":{"index.html":{}}}],["this.authservice.getme(req.user._id",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getuserbyid(id",{"_index":215,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["this.authservice.login(user._id",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupuser(newuser",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(body",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.getuserbyid(id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login(id).access_token",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login(user._id).access_token",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.taskmodel",{"_index":357,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.find().exec",{"_index":359,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findbyid(id",{"_index":360,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findbyidanddelete(id",{"_index":365,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findbyidandupdate(id",{"_index":363,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskservice.addtask(title",{"_index":327,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.deletetask(id",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.getall",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.getone(id",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.updatetask(id",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.usermodel",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone(data",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.adduser(newuser",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["thisismysecret",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throw",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["thrownerror",{"_index":262,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["thrownerror.message",{"_index":267,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["thrownerror.success",{"_index":268,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["timestamp",{"_index":269,"title":{},"body":{"classes/Error.html":{},"classes/HttpExceptionFilter.html":{}}}],["timestamps",{"_index":398,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":286,"title":{},"body":{"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":534,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":377,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/Task.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["twitter",{"_index":540,"title":{},"body":{"index.html":{}}}],["type",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/Error.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":313,"title":{},"body":{"controllers/TasksController.html":{},"index.html":{}}}],["unauthorized",{"_index":216,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["unique",{"_index":378,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":512,"title":{},"body":{"index.html":{}}}],["unused",{"_index":315,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatebletask",{"_index":353,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedat",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updatetask",{"_index":298,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask(@param('id",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetask(id",{"_index":308,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["usefilters",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["usefindandmodify",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["usenewurlparser",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["usepipes",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes(new",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":103,"title":{"interfaces/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthStrategy.html":{},"interfaces/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.model",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["usermodel",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":407,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":370,"title":{},"body":{"interfaces/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":399,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":14,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":117,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useunifiedtopology",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":199,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["validate(jwtpayload",{"_index":202,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["validateuser",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(data",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginDto.html":{},"classes/LoginDto-1.html":{},"dependencies.html":{}}}],["value",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":551,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":316,"title":{},"body":{"controllers/TasksController.html":{}}}],["void",{"_index":275,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":507,"title":{},"body":{"index.html":{}}}],["website",{"_index":538,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":528,"title":{},"body":{"index.html":{}}}],["z",{"_index":384,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["z]{2",{"_index":387,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":383,"title":{},"body":{"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { TasksModule } from './tasks/tasks.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost:27017/test', {\n      useUnifiedTopology: true,\n      useFindAndModify: true,\n      useNewUrlParser: true,\n    }),\n    TasksModule,\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AuthController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMe\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMe\n                        \n                        \n                    \n                \n            \n            \n                \ngetMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \nsignup(newUser: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newUser\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Req,\n  UseFilters,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CreateUserDto } from 'src/users/dto/user.dto';\nimport { HttpExceptionFilter } from 'src/utils/Error';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/user.dto';\n\n@Controller('auth')\n@UseFilters(HttpExceptionFilter)\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signup')\n  @UsePipes(new ValidationPipe())\n  signup(@Body() newUser: CreateUserDto) {\n    return this.authService.signupUser(newUser);\n  }\n\n  @Get('me')\n  @UseGuards(AuthGuard())\n  getMe(@Req() req) {\n    return this.authService.getMe(req.user._id);\n  }\n\n  @Post('signin')\n  async signin(@Body() body: LoginDto): Promise {\n    const user = await this.authService.validateUser(body);\n    return this.authService.login(user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthStrategy \n\nAuthStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAuthStrategy  -->\n\nAuthModule->AuthStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nAuthStrategy\n\nAuthStrategy\n\nAuthModule -->\n\nAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            AuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            AuthStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AuthStrategy } from './auth.strategy';\nimport { SECRET } from './constant';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    JwtModule.register({\n      secret: SECRET,\n      signOptions: { expiresIn: 3600 },\n    }),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, AuthStrategy],\n  exports: [AuthService, PassportModule, AuthStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMe\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                login\n                            \n                            \n                                    Async\n                                signupUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMe(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { access_token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signupUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signupUser(newUser: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newUser\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { Error } from 'src/utils/Error';\nimport * as _ from 'lodash';\nimport { CreateUserDto } from 'src/users/dto/user.dto';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  async signupUser(newUser: CreateUserDto) {\n    const check = await this.userService.findOne({\n      email: newUser.email,\n    });\n\n    if (check) {\n      throw new Error(false, 'email already exist', HttpStatus.CONFLICT);\n    }\n    const user = await this.userService.addUSer(newUser);\n    return {\n      success: true,\n      code: 201,\n      message: 'user registered successfully',\n      user: {\n        ..._.pick(user, [\n          '_id',\n          'name',\n          'email',\n          'createdAt',\n          'emailVerified',\n          'role',\n          'updatedAt',\n        ]),\n        access_token: this.login(user._id).access_token,\n      },\n    };\n  }\n\n  async validateUser(data: { email: string; password: string }): Promise {\n    const user = await this.userService.findOne({ email: data.email });\n    if (user && user.password === data.password) {\n      return user;\n    } else {\n      throw new Error(false, 'invalid credentials', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async getUserById(id: string) {\n    return this.userService.findById(id);\n  }\n\n  async getMe(id: string) {\n    const user = await this.getUserById(id);\n    if (user) {\n      return {\n        success: true,\n        code: 200,\n        user: {\n          ..._.pick(user, [\n            '_id',\n            'name',\n            'email',\n            'createdAt',\n            'emailVerified',\n            'role',\n            'updatedAt',\n          ]),\n          access_token: this.login(id).access_token,\n        },\n      };\n    } else {\n      throw new Error(false, 'invalid credentials', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  login(id: string) {\n    return {\n      access_token: this.jwtService.sign({ id }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthStrategy.html":{"url":"injectables/AuthStrategy.html","title":"injectable - AuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(jwtPayLoad: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jwtPayLoad\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Error } from 'src/utils/Error';\nimport { AuthService } from './auth.service';\nimport { SECRET } from './constant';\n@Injectable()\nexport class AuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: SECRET,\n    });\n  }\n\n  async validate(jwtPayLoad: { id: string }): Promise {\n    const { id } = jwtPayLoad;\n    const user = await this.authService.getUserById(id);\n    if (!user) {\n      throw new Error(false, 'unAuthorized', HttpStatus.UNAUTHORIZED);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/user.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(32)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(10)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/user.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(32)\n  @MinLength(5)\n  name: string;\n\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\nexport class LoginDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(32)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(10)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(32)\n  @MinLength(5)\n  name: string;\n\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\nexport class LoginDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Error.html":{"url":"classes/Error.html","title":"class - Error","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Error\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/Error.ts\n        \n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(success: boolean, message: string, status: HttpStatus)\n                    \n                \n                        \n                            \n                                Defined in src/utils/Error.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        success\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nexport class Error extends HttpException {\n  constructor(success: boolean, message: string, status: HttpStatus) {\n    super({ success, message, status }, status);\n  }\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const thrownError = exception.getResponse() as {\n      success: boolean;\n      message: string;\n      status: number;\n    };\n    response.status(status).json({\n      statusCode: status,\n      message: thrownError.message,\n      success: thrownError.success,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/Error.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/Error.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nexport class Error extends HttpException {\n  constructor(success: boolean, message: string, status: HttpStatus) {\n    super({ success, message, status }, status);\n  }\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const thrownError = exception.getResponse() as {\n      success: boolean;\n      message: string;\n      status: number;\n    };\n    response.status(status).json({\n      statusCode: status,\n      message: thrownError.message,\n      success: thrownError.success,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/user.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(10)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/user.dto.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(32)\n  @MinLength(5)\n  name: string;\n\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\nexport class LoginDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto-1.html":{"url":"classes/LoginDto-1.html","title":"class - LoginDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@MaxLength(10)@MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(32)\n  @MinLength(5)\n  name: string;\n\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\nexport class LoginDto {\n  @IsDefined()\n  @IsString()\n  @MaxLength(10)\n  @MinLength(5)\n  password: string;\n\n  @IsDefined()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        id\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Schema } from 'mongoose';\nexport const TaskSchema = new Schema({\n  title: {\n    type: String,\n    required: true,\n  },\n  description: {\n    type: String,\n    required: true,\n  },\n});\n\nexport interface Task extends Document {\n  id: string;\n  title: string;\n  description: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(title: string, description: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTask(id: string, body: Task)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseFilters,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { HttpExceptionFilter } from 'src/utils/Error';\nimport { Task } from './task.model';\nimport { TasksService } from './tasks.service';\n\n@Controller('tasks')\n@UseFilters(HttpExceptionFilter)\n@UseGuards(AuthGuard())\nexport class TasksController {\n  constructor(private readonly taskService: TasksService) {}\n\n  @Post()\n  async create(\n    @Body('title') title: string,\n    @Body('description') description: string\n  ) {\n    return await this.taskService.addTask(title, description);\n  }\n\n  @Get(':id')\n  async getOne(@Param('id') id: string) {\n    return this.taskService.getOne(id);\n  }\n\n  @Get()\n  async getAll() {\n    return this.taskService.getAll();\n  }\n  @Delete(':id')\n  async deleteTask(@Param('id') id: string) {\n    return this.taskService.deleteTask(id);\n  }\n\n  @Patch(':id')\n  updateTask(@Param('id') id: string, @Body() body: Task) {\n    return this.taskService.updateTask(id, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TaskSchema } from './task.model';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Task', schema: TaskSchema }]),\n    AuthModule,\n  ],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTask(title: string, description: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: string, updatebleTask: Task)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatebleTask\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Error } from 'src/utils/Error';\nimport { Task } from './task.model';\n\n@Injectable()\nexport class TasksService {\n  constructor(@InjectModel('Task') private readonly taskModel: Model) {}\n\n  async addTask(title: string, description: string) {\n    const task = new this.taskModel({\n      title,\n      description,\n    });\n    await task.save();\n    return task;\n  }\n\n  async getAll() {\n    const tasks = await this.taskModel.find().exec();\n    return tasks as Task[];\n  }\n\n  async getOne(id: string): Promise {\n    const task = await this.taskModel.findById(id);\n    if (!task) {\n      throw new Error(false, 'task not found', HttpStatus.NOT_FOUND);\n    }\n\n    return task;\n  }\n\n  async updateTask(id: string, updatebleTask: Task) {\n    const task = await this.taskModel.findByIdAndUpdate(id, updatebleTask, {\n      runValidators: true,\n      new: true,\n    });\n    if (!task) {\n      throw new Error(false, 'task not found', HttpStatus.NOT_FOUND);\n    }\n    return task;\n  }\n\n  async deleteTask(id: string) {\n    const task = await this.taskModel.findByIdAndDelete(id);\n    if (!task) {\n      throw new Error(false, 'task not found', HttpStatus.NOT_FOUND);\n    }\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        emailVerified\n                                \n                                \n                                        emailVerifyToken\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                        password\n                                \n                                \n                                        resetPasswordToken\n                                \n                                \n                                        role\n                                \n                                \n                                        salt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerifyToken\n                                    \n                                \n                                \n                                    \n                                        emailVerifyToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetPasswordToken\n                                    \n                                \n                                \n                                    \n                                        resetPasswordToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salt\n                                    \n                                \n                                \n                                    \n                                        salt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Schema } from 'mongoose';\nexport const userSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, 'Please add a full name'],\n      maxlength: [32, 'max character 32'],\n      trim: true,\n    },\n    email: {\n      type: String,\n      required: [true, 'Please add email'],\n      unique: true,\n      matcher: [\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      ],\n    },\n    emailVerified: {\n      type: Boolean,\n      default: false,\n    },\n    password: {\n      type: String,\n      required: [true, 'Please add a password'],\n      minlength: [5, 'password minimum lenth should be 5'],\n      maxlength: [10, 'password maximum lenth should be 10'],\n    },\n    salt: {\n      type: String,\n    },\n    role: {\n      type: String,\n      enum: ['user', 'admin'],\n      default: 'user',\n    },\n    resetPasswordToken: {\n      type: String,\n      default: null,\n    },\n    emailVerifyToken: {\n      type: String,\n      default: null,\n    },\n  },\n  { timestamps: true }\n);\n\nexport interface User extends Document {\n  id: string;\n  name: string;\n  email: string;\n  password: string;\n  emailVerified: true;\n  role: string;\n  salt: string;\n  resetPasswordToken: string;\n  emailVerifyToken: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseFilters } from '@nestjs/common';\nimport { HttpExceptionFilter } from 'src/utils/Error';\n\n@Controller('users')\n@UseFilters(HttpExceptionFilter)\nexport class UsersController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { userSchema } from './user.model';\nimport { AuthModule } from 'src/auth/auth.module';\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'User', schema: userSchema }]),\n    forwardRef(() => AuthModule),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUSer\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                signinUser\n                            \n                            \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addUSer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addUSer(newUser: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newUser\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signinUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signinUser(loginData: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginData\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signupUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signupUser(newUser: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newUser\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Error } from 'src/utils/Error';\nimport { CreateUserDto, LoginDto } from './dto/user.dto';\nimport { User } from './user.model';\nimport * as _ from 'lodash';\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('User') private readonly userModel: Model) {}\n\n  async signupUser(newUser: CreateUserDto) {\n    const check = await this.userModel.findOne({\n      email: newUser.email,\n    });\n\n    if (check) {\n      throw new Error(false, 'email already exist', HttpStatus.CONFLICT);\n    }\n    const user = new this.userModel({\n      ...newUser,\n    });\n\n    try {\n      await user.save();\n      return {\n        success: true,\n        code: 201,\n        message: 'user registered successfully',\n        user: _.pick(user, [\n          '_id',\n          'name',\n          'email',\n          'createdAt',\n          'emailVerified',\n          'role',\n          'updatedAt',\n        ]),\n      };\n    } catch (error) {}\n  }\n  async addUSer(newUser: CreateUserDto) {\n    const user = new this.userModel({\n      ...newUser,\n    });\n    try {\n      return await user.save();\n    } catch (error) {}\n  }\n  async signinUser(loginData: LoginDto) {\n    const user = await this.userModel.findOne({ ...loginData });\n    if (!user) {\n      throw new Error(false, 'invalid credentials', HttpStatus.BAD_REQUEST);\n    }\n    console.log(user);\n    return {\n      success: true,\n      code: 200,\n      user: _.pick(user, [\n        '_id',\n        'name',\n        'email',\n        'createdAt',\n        'emailVerified',\n        'role',\n        'updatedAt',\n      ]),\n    };\n  }\n\n  async findOne(data: any) {\n    return await this.userModel.findOne(data);\n  }\n  async findById(id: string) {\n    return await this.userModel.findById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.strategy.ts\n            \n            injectable\n            AuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constant.ts\n            \n            variable\n            SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/user.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/task.model.ts\n            \n            interface\n            Task\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/task.model.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            variable\n            userSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/Error.ts\n            \n            class\n            Error\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/Error.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mongoose : ^7.2.2\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.2\n        \n            class-validator : ^0.13.1\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.20\n        \n            mongoose : ^5.11.14\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            typeorm : ^0.2.30\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthStrategy \n\nAuthStrategy \n\nAuthStrategy  -->\n\nAuthModule->AuthStrategy \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nAuthStrategy\n\nAuthStrategy\n\nAuthModule -->\n\nAuthStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SECRET   (src/.../constant.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.model.ts)\n                        \n                        \n                            userSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constant.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SECRET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'THISISMYSECRET'\n                        \n                    \n\n\n            \n        \n\n    src/tasks/task.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  title: {\n    type: String,\n    required: true,\n  },\n  description: {\n    type: String,\n    required: true,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/users/user.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, 'Please add a full name'],\n      maxlength: [32, 'max character 32'],\n      trim: true,\n    },\n    email: {\n      type: String,\n      required: [true, 'Please add email'],\n      unique: true,\n      matcher: [\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      ],\n    },\n    emailVerified: {\n      type: Boolean,\n      default: false,\n    },\n    password: {\n      type: String,\n      required: [true, 'Please add a password'],\n      minlength: [5, 'password minimum lenth should be 5'],\n      maxlength: [10, 'password maximum lenth should be 10'],\n    },\n    salt: {\n      type: String,\n    },\n    role: {\n      type: String,\n      enum: ['user', 'admin'],\n      default: 'user',\n    },\n    resetPasswordToken: {\n      type: String,\n      default: null,\n    },\n    emailVerifyToken: {\n      type: String,\n      default: null,\n    },\n  },\n  { timestamps: true }\n)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
